{"undefined":{},"https://blog.inductorsoftware.com/Perplexity/home/devOverview":{"title":"Overview","site":"Perplexity","section":"Developer Tutorial Overview","teaser":"Overview\nThe DELPH-IN Consortium has developed a large and rich set of technologies for manipulating natural language. The list of DELPH-IN applicatio ..."},"https://blog.inductorsoftware.com/Perplexity/home/mrscon/devhowtoMRS":{"title":"Minimal Recursion Semantics (MRS)","site":"Perplexity","section":"MRS Conceptual","teaser":"The Minimal Recursion Semantics (MRS) Format\nThis section provides an overview of the Minimal Recursion Semantics format which is the primary artifact ..."},"https://blog.inductorsoftware.com/Perplexity/home/mrscon/devhowto0020WellFormedTree":{"title":"Well-Formed Trees","site":"Perplexity","section":"MRS Conceptual","teaser":"Building Well-Formed MRS Trees\nTo understand this section, first make sure you have a basic understanding of the MRS format.  \n\nLet's use the sentence ..."},"https://blog.inductorsoftware.com/Perplexity/home/devcon/devcon0000Overview":{"title":"Overview","site":"Perplexity","section":"MRS Solver Conceptual","teaser":"MRS Solver Concepts\nAll of the topics in this section are designed to describe the algorithms and concepts needed to build a backtracking solver for a ..."},"https://blog.inductorsoftware.com/Perplexity/home/devcon/devcon0010MRSSolver":{"title":"Backtracking","site":"Perplexity","section":"MRS Solver Conceptual","teaser":"Solving an MRS\nIt is important to understand what MRS is and what a well-formed MRS tree is before reading this section. Visit those links first to un ..."},"https://blog.inductorsoftware.com/Perplexity/home/devcon/devcon0020MRSSolverSets":{"title":"Representing 'Together'","site":"Perplexity","section":"MRS Solver Conceptual","teaser":"Add \"Together\" and \"Separately\" To the Solver\nIf there were multiple large files in folders, the formula we ended the MRS Solver section with:\nformula ..."},"https://blog.inductorsoftware.com/Perplexity/home/devcon/devcon0030MRSSolverSolutionGroups":{"title":"Collective, Distributive, Cumulative","site":"Perplexity","section":"MRS Solver Conceptual","teaser":"Collective and Distributive Readings\nIf we change the \"students lifted a table\" example from the previous section slightly, we can uncover another lay ..."},"https://blog.inductorsoftware.com/Perplexity/home/devcon/devcon0040MRSSolverSolutionGroupsAlgorithm":{"title":"Coll/Dist/Cuml Algorithm","site":"Perplexity","section":"MRS Solver Conceptual","teaser":"Solution Group Algorithm\nAs described in the previous section, the only way to represent the semantics of collective, distributive and cumulative read ..."},"https://blog.inductorsoftware.com/Perplexity/home/devcon/devcon0050MRSSolverSolutionCombinations":{"title":"Combinations and Proper Responses","site":"Perplexity","section":"MRS Solver Conceptual","teaser":"Combination Algorithm\nIn the section introducing the solution grouping algorithm, the algorithm starts with:\nFor each possible combination of solution ..."},"https://blog.inductorsoftware.com/Perplexity/home/devcon/devcon0060WhichParseAndTree":{"title":"Choosing a Parse and Tree","site":"Perplexity","section":"MRS Solver Conceptual","teaser":"Determining the Right Parse and Tree\nAs discussed in the MRS topic and the Well-Formed Trees topic, a single phrase like \"Look under the table\" produc ..."},"https://blog.inductorsoftware.com/Perplexity/home/devcon/devcon0070SentenceForce":{"title":"Sentence Types","site":"Perplexity","section":"MRS Solver Conceptual","teaser":"Sentence Types\nWe've been using a lot of examples that are questions and propositions without actually working through how the system should detect th ..."},"https://blog.inductorsoftware.com/Perplexity/home/devcon/devcon0080ErrorsChoosingWhichFailure":{"title":"Choosing a Failure","site":"Perplexity","section":"MRS Solver Conceptual","teaser":"Reporting the Right Failure\nBecause a backtracking system can encounter many failures before finding a solution (or not), we have a few challenges to  ..."},"https://blog.inductorsoftware.com/Perplexity/home/pxint/pxint0000Overview":{"title":"Overview","site":"Perplexity","section":"Perplexity Internals","teaser":"Perplexity Internals\nThis section walks through the details of implementing the concepts described in the MRS Solver Conceptual section in a Python ap ..."},"https://blog.inductorsoftware.com/Perplexity/home/pxint/pxint0010PredicationContract":{"title":"The Predication Contract","site":"Perplexity","section":"Perplexity Internals","teaser":"The Predication Contract\nIt is important to understand what MRS is and what a well-formed MRS tree is before reading this section. Visit those links f ..."},"https://blog.inductorsoftware.com/Perplexity/home/pxint/pxint0020PythonBasics":{"title":"State and Python Basics","site":"Perplexity","section":"Perplexity Internals","teaser":"The State object (and a Python Primer)\nThe predication contract can be implemented in any programming language, but we'll be using Python. This sectio ..."},"https://blog.inductorsoftware.com/Perplexity/home/pxint/pxint0030ImplementPredication":{"title":"Implementing a Predication","site":"Perplexity","section":"Perplexity Internals","teaser":"Implementing a Predication\nWith that Python background and the creation of the State object, we can now implement the predication contract for a predi ..."},"https://blog.inductorsoftware.com/Perplexity/home/pxint/pxint0040BuildSolver":{"title":"Initial Solver","site":"Perplexity","section":"Perplexity Internals","teaser":"Converting MRS Text to Python Function Calls\nSo far, we have been calling our predications directly as functions. To be able to solve an MRS we're goi ..."},"https://blog.inductorsoftware.com/Perplexity/home/pxint/pxint0050Conjunctions":{"title":"Solving Conjunctions","site":"Perplexity","section":"Perplexity Internals","teaser":"Solving Conjuctions of Predications\nThere are two ways to group predications together in an MRS: as a \"conjunction\" (i.e. a logical \"and\") or by using ..."},"https://blog.inductorsoftware.com/Perplexity/home/pxint/pxint0060ScopalArguments":{"title":"Soliving Scopal Arguments","site":"Perplexity","section":"Perplexity Internals","teaser":"Solving Scopal Arguments\nScopal arguments are predication arguments that hold other predications, much like lambda functions can pass around functions ..."},"https://blog.inductorsoftware.com/Perplexity/home/pxint/pxint0070GenerateMRSAndTrees":{"title":"Generating MRS and Trees","site":"Perplexity","section":"Perplexity Internals","teaser":"Converting Phrases to MRS and Well-Formed Trees\nNow let's take our knowledge of MRS and well-formed trees and write the code that will convert a human ..."},"https://blog.inductorsoftware.com/Perplexity/home/pxint/pxint0071WhichParseAndTree":{"title":"Choosing a Parse and Tree","site":"Perplexity","section":"Perplexity Internals","teaser":"Determining the Right Parse and Tree\nAs discussed in the conceptual topic on Choosing a Parse and Tree, returning the response from the first MRS pars ..."},"https://blog.inductorsoftware.com/Perplexity/home/pxint/pxint0080SimplePropositions":{"title":"Propositions","site":"Perplexity","section":"Perplexity Internals","teaser":"Responding to Simple Propositions\nThe Sentence Types conceptual topic outlines the logic for how to detect what type of phrase a user made. Here we'll ..."},"https://blog.inductorsoftware.com/Perplexity/home/pxint/pxint0090SimpleQuestions":{"title":"Questions","site":"Perplexity","section":"Perplexity Internals","teaser":"Simple Questions\nNote that the MRS for \"Is a file large?\" is identical to the proposition \"A file is large.\" except that it has a different sentence f ..."},"https://blog.inductorsoftware.com/Perplexity/home/pxint/pxint0100SimpleCommands":{"title":"Commands","site":"Perplexity","section":"Perplexity Internals","teaser":"Simple Commands\nIt is finally time to implement a \"command\" so that users can actually do something with the system we are building. We're going to im ..."},"https://blog.inductorsoftware.com/Perplexity/home/pxint/pxint0105ErrorsChoosingWhichFailure":{"title":"Choosing a Failure","site":"Perplexity","section":"Perplexity Internals","teaser":"Reporting the Right Failure\nAs described in the conceptual topic on Choosing a Failure, a good heurstic to use for reporting failures to the user is t ..."},"https://blog.inductorsoftware.com/Perplexity/home/pxint/pxint0110ErrorsReportingAFailure":{"title":"Naive Failures","site":"Perplexity","section":"Perplexity Internals","teaser":"Reporting a Failure Naively\nWith all that in place, we can now start reporting errors from predications. As outlined in the predication contract, \"fai ..."},"https://blog.inductorsoftware.com/Perplexity/home/pxint/pxint0120ErrorsConceptualFailures":{"title":"Words in Failures","site":"Perplexity","section":"Perplexity Internals","teaser":"Converting Variables to English\nSo far, the code for large_a_1 looks like this:\n@Predication(vocabulary, name=&quot;_large_a_1&quot;)\ndef large_a_1(st ..."},"https://blog.inductorsoftware.com/Perplexity/home/pxint/pxint0130ErrorsRobustFailure":{"title":"Robust Failures","site":"Perplexity","section":"Perplexity Internals","teaser":"Reporting a Failure More Robustly\nOne final piece of cleanup work remains in our effort to report decent failures when resolving an MRS. We will be re ..."},"https://blog.inductorsoftware.com/Perplexity/home/pxhowto/pxHowTo10Overview":{"title":"Overview","site":"Perplexity","section":"Using Perplexity","teaser":"Using Perplexity\nPerplexity is a Python library designed to support building natural language software interfaces on DELPH-IN grammars. Interfaces are ..."},"https://blog.inductorsoftware.com/Perplexity/home/pxhowto/pxHowTo20ImplementAPredication":{"title":"Implementing a Predication","site":"Perplexity","section":"Using Perplexity","teaser":"Implementing a Predication\nRecall from the section on backtracking that Perplexity interpets a phrase by:\nConverting the phrase to an MRS document\n\nCr ..."},"https://blog.inductorsoftware.com/Perplexity/home/pxhowto/pxHowTo30InStylePredications":{"title":"In-Style Predications","site":"Perplexity","section":"Using Perplexity","teaser":"In-Style Predications\nLogic gets more complicated when there is more than one x argument because there are many cases to handle. The predication for \" ..."},"https://blog.inductorsoftware.com/Perplexity/home/pxhowto/pxHowTo40LiftStylePredications":{"title":"Lift-Style Predications","site":"Perplexity","section":"Using Perplexity","teaser":"Lift-Style Predications\nNot all words are associative with sets like \"in\" from the previous section: The verb \"to lift\" interprets sets vs. individual ..."},"https://blog.inductorsoftware.com/Perplexity/home/pxhowto/pxHowTo50EventPredications":{"title":"Event Predications","site":"Perplexity","section":"Using Perplexity","teaser":"Predications with Event Variables\nSo far, we have been conveniently ignoring event variables (variables that start with \"e\"). Where instance (x) varia ..."},"https://blog.inductorsoftware.com/Perplexity/home/pxhowto/pxHowTo70ActionVerbs":{"title":"Verb Predications","site":"Perplexity","section":"Using Perplexity","teaser":"Action Verbs\nAll of the predications we've dealt with so far have just been used to ask questions like \"Is a file large?\" or make propositions like \"A ..."},"https://blog.inductorsoftware.com/Perplexity/home/pxhowto/pxHowTo80QuantifiersAndDeterminers":{"title":"Quantifiers and Determiners","site":"Perplexity","section":"Using Perplexity","teaser":"Quantifiers and Determiners\nAt this point we've walked through all of the predications for the MRS of \"a file is large\" or \"delete a file\" except one. ..."}}